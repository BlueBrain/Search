;Blue Brain Search is a text mining toolbox focused on scientific use cases.
;
;Copyright (C) 2020  Blue Brain Project, EPFL.
;
;This program is free software: you can redistribute it and/or modify
;it under the terms of the GNU Lesser General Public License as published by
;the Free Software Foundation, either version 3 of the License, or
;(at your option) any later version.
;
;This program is distributed in the hope that it will be useful,
;but WITHOUT ANY WARRANTY; without even the implied warranty of
;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;GNU Lesser General Public License for more details.
;
;You should have received a copy of the GNU Lesser General Public License
;along with this program. If not, see <https://www.gnu.org/licenses/>.

[tox]
minversion = 3.1.0
requires = virtualenv >= 20.0.0
sources = setup.py .env src/bluesearch tests benchmarks data_and_models
envlist = lint, type, py{37, 38, 39}, docs, check-apidoc, check-packaging
; Enable PEP-517/518, https://tox.wiki/en/latest/config.html#conf-isolated_build
isolated_build = true

[testenv]
description = Run pytest
download = true
deps =
    en-core-web-sm @ https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.0.0/en_core_web_sm-3.0.0.tar.gz
    en-core-sci-lg @ https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/releases/v0.4.0/en_core_sci_lg-0.4.0.tar.gz
extras = dev
allowlist_externals = docker
commands = pytest -m "" {posargs:tests}

[testenv:lint]
description = Lint using flake8, black, isort and bandit
basepython = python3.7
skip_install = true
deps =
    bandit==1.7.0
    black==22.3.0
    flake8==3.9.2
    flake8-bugbear==21.4.3
    flake8-comprehensions==3.5.0
    flake8-docstrings==1.6.0
    isort==5.9.1
commands =
    flake8 {posargs:{[tox]sources}}
    isort --check {posargs:{[tox]sources}}
    black --check {posargs:{[tox]sources}}
    bandit -qr --exclude "benchmarks/,tests/,data_and_models/pipelines/ner/transformers_vs_spacy/transformers/" \
    {posargs:{[tox]sources}}

[testenv:type]
description = Run static type checks using mypy
basepython = python3.7
skip_install = true
deps =
    mypy==0.910
    pandas-stubs==1.2.0.1
    sqlalchemy-stubs==0.4
    types-PyYAML==5.4.3
    types-requests==2.25.0
    types-setuptools==57.0.0
    typing-extensions==3.10.0.0
commands =
    mypy {posargs:{[tox]sources}}

[testenv:format]
description = Apply black and isort
basepython = python3.8
skip_install = true
deps =
    black==22.3.0
    isort==5.8.0
commands =
    isort {posargs:{[tox]sources}}
    black {posargs:{[tox]sources}}

[testenv:docs]
description = Build docs and run doctest
basepython = python3.7
changedir = docs
extras = dev
allowlist_externals = make
# set warnings as errors using the -W sphinx option
commands =
    make clean
    make doctest SPHINXOPTS=-W
    make html SPHINXOPTS=-W

[testenv:apidoc]
description = Re-generate the API docs
skip_install = true
allowlist_externals = rm
deps = sphinx
commands =
    rm -r docs/source/api
    sphinx-apidoc -Tefo docs/source/api src/bluesearch src/bluesearch/version.py

[testenv:check-apidoc]
description = Check that the API docs are up-to-date
skip_install = true
allowlist_externals = diff
deps = sphinx
commands =
    sphinx-apidoc -Tefo {envtmpdir} src/bluesearch src/bluesearch/version.py
    diff {envtmpdir} docs/source/api

[testenv:check-packaging]
description = Generate source and wheel dists and run twine checks
basepython = python3.7
deps =
    setuptools-scm
    wheel
    twine
commands =
    python setup.py sdist bdist_wheel -d {envtmpdir}/dist
    twine check {envtmpdir}/dist/*

[testenv:benchmarks]
description = Run pytest benchmark tests
download = true
extras = dev
deps = pygal
allowlist_externals = echo
passenv =
    EMBEDDING_SERVER
    MINING_SERVER
    MYSQL_SERVER
    SEARCH_SERVER
commands =
    echo EMBEDDING_SERVER={env:EMBEDDING_SERVER:}
    echo MINING_SERVER={env:MINING_SERVER:}
    echo MYSQL_SERVER={env:MYSQL_SERVER:}
    echo SEARCH_SERVER={env:SEARCH_SERVER:}
    pytest \
        --benchmark-only \
        --benchmark-group-by=func \
        --no-cov \
        --benchmark-min-rounds=1 \
        --embedding_server="{env:EMBEDDING_SERVER:}" \
        --mining_server="{env:MINING_SERVER:}" \
        --mysql_server="{env:MYSQL_SERVER:}" \
        --search_server="{env:SEARCH_SERVER:}" \
        {posargs} \
        benchmarks

[pytest]
testpaths = tests
# reason for the ignore: https://github.com/docker/docker-py/issues/2928
filterwarnings =
    error
    ignore::DeprecationWarning:docker.*:
    ignore::DeprecationWarning:luigi.task:
    ignore::DeprecationWarning:transformers.image_utils.*:
    ignore::elastic_transport.SecurityWarning
    ignore::urllib3.exceptions.InsecureRequestWarning
addopts =
    --cov
    --cov-config=tox.ini
    --no-cov-on-fail
    --durations=20
    --verbosity=1
    --last-failed-no-failures=all
    -m "not slow and not network"
    -p no:unraisableexception
markers =
    network: tests that require a network connection
    slow: tests that are slow

[coverage:run]
source = bluesearch
branch = True

[coverage:report]
fail_under = 80
skip_covered = False
show_missing = False

[flake8]
count = False
extend-exclude =
    data_and_models/pipelines/sentence_embedding/training_transformers/
    data_and_models/pipelines/ner/transformers_vs_spacy/transformers/
max-line-length = 88
extend-ignore = E203
docstring-convention = numpy
per-file-ignores =
    tests/*:D
    benchmarks/*:D

[isort]
profile = black
honor_noqa = true
known_third_party = docker
extend_skip =
    data_and_models/pipelines/sentence_embedding/training_transformers/
    data_and_models/pipelines/ner/transformers_vs_spacy/transformers/
